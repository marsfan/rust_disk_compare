/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at https: //mozilla.org/MPL/2.0/.
*/
//! Enumeration of errors the tool can produce.

use std::io;
use std::path::{PathBuf, StripPrefixError};
use thiserror::Error;

// TODO: Implement Eq/PartialEq for this manually since io::Error does not
/// Enumeration of errors generated by the tool
#[derive(Debug, Error)]
pub enum ToolError {
    /// Indicates something went wrong with the opening the file.
    #[error("Error reading a file. IO Error Kind: {}, path: {filepath}", source.kind())]
    FileReadError {
        /// The base error that was converted to this one
        source: io::Error,

        /// The filepath that triggered the error.
        filepath: PathBuf,
    },

    /// Indicates the given path is not a file
    #[error("The given path is not a file: {filepath}")]
    NotAFileError {
        /// The path that is not a file.
        filepath: PathBuf,
    },

    /// Indicates something went wrong copying file contents into the hasher
    #[error("Error reading file bytes into hasher. path: {filepath}")]
    ByteCopyError {
        /// Parent of this specific error
        source: io::Error,

        /// The filepath that triggered the error
        filepath: PathBuf,
    },

    /// Indicates an error unwrapping a path
    #[error("Error stripping the base '{base}' from the path '{filepath}'")]
    StripPrefixError {
        /// Parent of this specific error
        source: StripPrefixError,

        /// The filepath that triggered this error
        filepath: PathBuf,

        /// The base path that was not able to be stripped
        base: PathBuf,
    },

    /// Indicates an error occurred when walking the directory
    #[error("Error when walking directory '{base}' on file '{}'", self.get_filepath().display())]
    WalkDirError {
        /// Parent of this specifc error
        ///
        /// Kept in a box since [`walkdir::Error`] is fairly large (72 bytes)
        source: Box<walkdir::Error>,

        /// The base path that was being walked
        base: PathBuf,
    },
}

impl ToolError {
    /// Get the path to the file affect by the error
    ///
    /// # Returns
    ///   Path to the file affected by the error
    pub fn get_filepath(&self) -> PathBuf {
        match self {
            Self::ByteCopyError { filepath, .. }
            | Self::StripPrefixError { filepath, .. }
            | Self::FileReadError { filepath, .. }
            | Self::NotAFileError { filepath } => filepath.clone(),
            Self::WalkDirError { source, .. } => match source.path() {
                Some(p) => p.to_path_buf(),
                None => PathBuf::from(""),
            },
        }
    }
}
